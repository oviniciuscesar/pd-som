#N canvas 856 63 809 852 10;
#X obj 1 27 cnv 3 800 3 empty empty description 12 12 0 14 #7c7c7c #404040 0;
#X obj 1 87 cnv 3 800 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 83 93 cnv 18 3 17 empty empty 0 5 9 0 14 #dcdcdc #9c9c9c 0;
#X obj 1 317 cnv 3 800 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 83 323 cnv 18 3 17 empty empty 0 5 9 0 14 #dcdcdc #9c9c9c 0;
#X obj 83 353 cnv 18 3 17 empty empty 1 5 9 0 14 #dcdcdc #9c9c9c 0;
#X obj 83 381 cnv 18 3 17 empty empty 2 5 9 0 14 #dcdcdc #9c9c9c 0;
#X obj 1 407 cnv 3 800 3 empty empty example 8 12 0 13 #dcdcdc #000000 0;
#X obj 1 -1 cnv 3 800 3 empty empty som 14 14 1 22 #7c7c7c #404040 0;
#X text 105 323 list:;
#X text 104 353 list:;
#X text 105 382 list:;
#X obj 175 699 som, f 34;
#X floatatom 647 467 5 0 0 0 - - - 0;
#X msg 647 485 learning \$1;
#X floatatom 648 506 5 0 0 0 - - - 0;
#X msg 648 524 topology \$1;
#X floatatom 648 545 5 0 0 0 - - - 0;
#X floatatom 648 584 5 0 0 0 - - - 0;
#X text 267 147 amount of epochs for the network stops learning (default = 100), f 63;
#X text 740 8 v.0.1.0;
#X text 112 128 learning: [float];
#X text 111 110 input data: [list];
#X text 113 197 datasize: [integer];
#X text 113 255 reset: [message];
#X text 114 272 print: [message];
#X obj 340 791 print epoch;
#X obj 405 772 print radius;
#X text 267 239 set the neurons weights with randon values between 0 and 1;
#X obj 376 717 bng 16 250 50 0 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000;
#X text 160 383 bang when the network reachs the maximum epoch;
#X text 266 197 size of the input data - "amount of data" (default 20), f 55;
#X obj 175 779 print x;
#X obj 198 760 print y;
#X obj 275 735 route learning epoch radius mse, f 44;
#X obj 470 754 print mse;
#X text 269 270 print network info: current learning rate \, current epoch \, current radius and mean square error, f 88;
#X floatatom 647 427 5 0 0 0 - - - 0;
#X text 267 255 reset the network parameters;
#X text 267 180 amount of neighbor neurons between 1 and 8 (default = 4);
#X text 266 128 learning rate between 0 and 1 (default = 0.5);
#X text 267 164 neighborhood radius between 0 and 1 (default = 0.25);
#X text 265 106 input data for training - two-dimensional or three-dimensional (default = two-dimensional, f 58;
#X text 158 323 outputs a list with the neurons weight vectors (x \, y \, and z) for each input data;
#X obj 221 742 print z;
#X obj 275 810 print learning;
#X text 113 147 epochs: [integer];
#X msg 648 563 epochs \$1;
#X msg 648 602 nradius \$1;
#X text 631 33 Vinícius César de Oliveira;
#X text 113 164 nradius: [float];
#X obj 175 720 route x y z, f 12;
#X text 159 352 list with all updated parameters for each epoch (learning rate \, epoch \, neighborhood radius \, and mean square error);
#X text 113 239 random: [message];
#X text 112 226 linear: [message];
#X text 267 222 set the neurons weights with linear values between 0 and 1;
#X text 114 291 write: [message];
#X text 111 95 netsize: [list];
#X text 264 94 nuembers of neurons and weight dimensions (default = 10 \, 2);
#X text 268 292 write the neurons weights into a text file;
#X text 113 180 topology: [integer];
#X text 33 55 implementation of Self-Organized Maps (SOM) \, an unsupervised neural network developed by Teuvo Kohonen;
#X msg 648 642 training \$1;
#X obj 648 624 tgl 16 0 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 47 771 route index winner;
#X obj 47 803 print index;
#X obj 130 804 print winner;
#X obj 175 459 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#N canvas 1416 187 1144 823 dataset 0;
#X obj 408 247 text define \$0-dataset;
#X obj 62 306 text get \$0-dataset;
#X obj 62 180 until;
#X obj 62 218 f;
#X obj 140 234 + 1;
#X obj 140 176 sel 0;
#X obj 62 264 t f b;
#X obj 62 151 t b b;
#X obj 62 129 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 174 220 text size \$0-dataset;
#X obj 62 330 outlet;
#X obj 62 104 inlet;
#X obj 375 112 t b b;
#X obj 375 88 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 375 65 loadbang;
#X obj 204 114 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 203 92 inlet;
#X text 55 79 training;
#X msg 207 245 datasize \$1;
#X msg 407 197 read data/data_test.txt;
#X text 554 247 <- open to see the dataset!;
#X text 562 196 <- two-dimension training dataset;
#X obj 207 270 s som;
#X text 202 75 test;
#X obj 140 272 mod 40;
#X connect 1 0 10 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 0 6 0;
#X connect 4 0 24 0;
#X connect 5 0 2 1;
#X connect 6 0 1 0;
#X connect 7 0 2 0;
#X connect 8 0 7 0;
#X connect 9 0 18 0;
#X connect 9 0 24 1;
#X connect 11 0 8 0;
#X connect 12 0 9 0;
#X connect 12 1 19 0;
#X connect 13 0 12 0;
#X connect 14 0 13 0;
#X connect 15 0 3 0;
#X connect 16 0 15 0;
#X connect 18 0 22 0;
#X connect 19 0 0 0;
#X connect 24 0 3 1;
#X connect 24 0 5 0;
#X restore 175 518 pd dataset;
#X text 176 443 v;
#X text 176 433 |;
#X obj 232 495 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X text 180 428 - input data for training (each bang = 1 training epoch);
#X text 238 478 v;
#X text 238 469 |;
#X text 258 478 (each bang = 1 test example);
#X text 683 69 tested on pd-0.54-1;
#N canvas 1038 138 1237 683 other-messages 0;
#X obj 533 526 outlet;
#X msg 702 191 print;
#X msg 652 131 reset;
#X obj 773 449 bng 16 250 50 0 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000;
#X msg 624 81 random;
#X msg 535 30 linear;
#X msg 774 347 proba \$1;
#X floatatom 774 329 5 0 1 0 - - - 0;
#X floatatom 774 379 5 0 0 0 - - - 0;
#X msg 774 397 datasize \$1;
#X obj 771 489 r som;
#X msg 725 247 write data/test-file.txt;
#X msg 725 286 read data/trained-model.txt;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 6 0;
#X connect 8 0 9 0;
#X connect 9 0 0 0;
#X connect 10 0 0 0;
#X connect 11 0 0 0;
#X connect 12 0 0 0;
#X restore 648 666 pd other-messages;
#X msg 647 446 netsize \$1 2;
#X text 242 464 - input data for test;
#X text 113 302 read: [message];
#X text 267 302 read the neurons weights saved in a text file;
#X text 113 211 proba: [float];
#X text 266 209 probability of the winning neuron being the closest to the input (default = 1), f 79;
#X connect 12 0 51 0;
#X connect 12 0 64 0;
#X connect 12 1 34 0;
#X connect 12 2 29 0;
#X connect 13 0 14 0;
#X connect 14 0 12 0;
#X connect 15 0 16 0;
#X connect 16 0 12 0;
#X connect 17 0 47 0;
#X connect 18 0 48 0;
#X connect 34 0 45 0;
#X connect 34 1 26 0;
#X connect 34 2 27 0;
#X connect 34 3 35 0;
#X connect 37 0 78 0;
#X connect 47 0 12 0;
#X connect 48 0 12 0;
#X connect 51 0 32 0;
#X connect 51 1 33 0;
#X connect 51 2 44 0;
#X connect 62 0 12 0;
#X connect 63 0 62 0;
#X connect 64 0 65 0;
#X connect 64 1 66 0;
#X connect 67 0 68 0;
#X connect 68 0 12 0;
#X connect 71 0 68 1;
#X connect 77 0 12 0;
#X connect 78 0 12 0;
