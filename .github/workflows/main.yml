name: C/C++ CI
on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  LIBNAME: som
  LIBVERSION: 0.1
jobs:
  macos-universal-build:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        precision: [32, 64] # TODO: We need to install PD64?
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Install PureData and Deps
        run: |
          brew install --cask pd
          # Add here dynamic libraries that you use (ex. fftw3, gsl, ...).
          # Search for the name in https://brew.sh/
      - name: Install Gsl
        run: 
         brew install gsl  
      - name: Build Object for Arm
        if: ${{ matrix.arch == 'arm64' }}
        continue-on-error: true
        run: |
          cd Libraries/gsl/ampl/thirdparty/asl
          git checkout 2f5d9de
          cd ../../../../..
          cmake . -B build -DCMAKE_OSX_ARCHITECTURES=arm64 -DPD_FLOATSIZE=${{ matrix.precision }} -DDOCUMENTATION=OFF -DGSL_DISABLE_TESTS=1
          cmake --build build -j $(sysctl -n hw.logicalcpu)
      - name: Build Object for Intel
        if: ${{ matrix.arch == 'amd64' }}
        run: |
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DCMAKE_OSX_ARCHITECTURES=x86_64 -DDOCUMENTATION=OFF -DGSL_DISABLE_TESTS=1
          cmake --build build -j $(sysctl -n hw.logicalcpu)
      - name: Upload Object
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-macos-${{matrix.arch}}-${{matrix.precision}}
          path: Binaries
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        compiler: [mingw] # CHANGE: Choose between a compiler, you don't need boths
        arch: [amd64]
        precision: [32, 64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      # ──────────────────────────────────────
      - if: matrix.compiler == 'mingw'
        name: Set up Msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: make mingw-w64-x86_64-gcc mingw64/mingw-w64-x86_64-cmake mingw-w64-x86_64-python-sphinx mingw-w64-x86_64-python-sphinx_rtd_theme
          update: false
      # ──────────────────────────────────────
      - name: Install winget
        uses: Cyberboss/install-winget@v1
      - name: Install PureData Float 32
        if: matrix.precision == '32'
        run: |
          winget install -e --id MillerPuckette.PureData --accept-source-agreements
      - name: Install PureData Float 64
        if: matrix.precision == '64'
        run: |
          winget install -e --id MillerPuckette.Pd64 --accept-source-agreements
      - name: Configure and build
        shell: msys2 {0}
        run: |
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DDOCUMENTATION=OFF -DGSL_DISABLE_TESTS=1
          cmake --build build
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-f${{ matrix.precision }}-windows-${{ matrix.compiler }}
          path: Binaries
  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64]
        precision: [32, 64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: PureData Sources
        run: |
          sudo apt update
          sudo add-apt-repository ppa:pure-data/pure-data -y
          sudo apt install puredata -y
          # Add here dynamic libraries that you use (ex. fftw3, gsl, ...).
          # search for the name in https://packages.ubuntu.com/search
      - name: Install aarch64 gcc
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt install gcc-aarch64-linux-gnu -y
          sudo apt install g++-aarch64-linux-gnu -y
      - name: Install arm gcc
        if: matrix.arch == 'arm'
        run: |
          sudo apt install gcc-arm-linux-gnueabihf -y
          sudo apt install g++-arm-linux-gnueabihf -y
      - name: Build Object
        if: matrix.arch == 'amd64'
        run: |
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DDOCUMENTATION=OFF -DGSL_DISABLE_TESTS=1
          cmake --build build -- -j$(nproc)
      - name: Upload Object
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LIBNAME }}-linux-${{matrix.arch}}-${{matrix.precision}}
          path: Binaries
  package-artifacts:
    needs: [macos-universal-build, windows-build, linux-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '${{ env.LIBNAME }}-*'
          path: ${{ env.LIBNAME }}
          merge-multiple: true
      - name: Clear tmp files
        run: |
          rm -f ${{ env.LIBNAME }}/*.pdb
          rm -f ${{ env.LIBNAME }}/*.a
        # ──────────────────────────────────────
      - name: Install Deken
        continue-on-error: true
        run: |
          mkdir -p ${PWD}/package
          docker run --rm --user $(id -u) \
          --volume ${PWD}/${{env.LIBNAME}}:/${{env.LIBNAME}} \
          --volume ${PWD}/package:/package \
          registry.git.iem.at/pd/deken \
          deken package /${{env.LIBNAME}} --output-dir /package -v ${{env.LIBVERSION}} -n ${{env.LIBNAME}}
      - name: Clear Artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: ${{ env.LIBNAME }}-*
      - name: Upload Bin
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LIBNAME }}-${{env.LIBVERSION}}
          path: "./${{env.LIBNAME}}"
      - name: Upload Deken
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LIBNAME }}-${{env.LIBVERSION}}-deken
          path: "./package/"
